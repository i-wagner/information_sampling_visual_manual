clear all; close all; clc

%% Init
folder.root = ['/Users/ilja/Library/CloudStorage/' ...
               'GoogleDrive-ilja.wagner1307@gmail.com/My Drive/' ...
               'mr_informationSamplingVisualManual/'];
folder.data = strcat(folder.root, '2_data/');


%% Load data
dataSuffix = ["_oddTrialsExcluded", "_evenTrialsExcluded"];
nSplits = numel(dataSuffix);

dataOddEvenTrials = [];
for d = 1:nSplits 
    data = load(strcat(folder.data, ...
                       strcat('data_newPipeline', dataSuffix(d)), ...
                       '.mat'));
    dataOddEvenTrials = ...
        cat(3, ...
           dataOddEvenTrials, ...
           [data.data.performance.proportionCorrect.easy(:,1), ...              % Visual
            data.data.performance.proportionCorrect.difficult(:,1), ...
            data.data.time.planning.mean.easy(:,1), ...
            data.data.time.planning.mean.difficult(:,1), ...
            data.data.time.inspection.mean.easy(:,1), ...
            data.data.time.inspection.mean.difficult(:,1), ...
            data.data.time.response.mean.easy(:,1), ...
            data.data.time.response.mean.difficult(:,1), ...
            data.data.choice.sigmoidFit(:,1,2), ...
            data.data.choice.sigmoidFit(:,3,2), ...
            data.data.fixations.timecourse.onChosen(:,1,2), ...
            data.data.fixations.timecourse.onChosen(:,2,2), ...
            data.data.fixations.timecourse.onEasy(:,1,2), ...
            data.data.fixations.timecourse.onEasy(:,2,2), ...
            data.data.fixations.timecourse.onSmaller(:,1,2), ...
            data.data.fixations.timecourse.onSmaller(:,2,2), ...
            data.data.fixations.timecourse.onClosest(:,1,2), ...
            data.data.fixations.timecourse.onClosest(:,2,2), ...
            data.data.fixations.latenciesFirstGazeShift(:,1,2), ...
            data.data.fixations.latenciesFirstGazeShift(:,2,2), ...
            data.probabilisticModel.pred.visual.freeParameter(:,1), ...
            data.probabilisticModel.pred.visual.freeParameter(:,2), ...
            data.data.performance.proportionCorrect.easy(:,3), ...              % Manual
            data.data.performance.proportionCorrect.difficult(:,3), ...
            data.data.time.planning.mean.easy(:,3), ...
            data.data.time.planning.mean.difficult(:,3), ...
            data.data.time.inspection.mean.easy(:,3), ...
            data.data.time.inspection.mean.difficult(:,3), ...
            data.data.time.response.mean.easy(:,3), ...
            data.data.time.response.mean.difficult(:,3), ...
            data.data.choice.sigmoidFit(:,1,4), ...
            data.data.choice.sigmoidFit(:,3,4), ...
            data.data.fixations.timecourse.onChosen(:,1,4), ...
            data.data.fixations.timecourse.onChosen(:,2,4), ...
            data.data.fixations.timecourse.onEasy(:,1,4), ...
            data.data.fixations.timecourse.onEasy(:,2,4), ...
            data.data.fixations.timecourse.onSmaller(:,1,4), ...
            data.data.fixations.timecourse.onSmaller(:,2,4), ...
            data.data.fixations.timecourse.onClosest(:,1,4), ...
            data.data.fixations.timecourse.onClosest(:,2,4), ...
            data.data.fixations.latenciesFirstGazeShift(:,1,4), ...
            data.data.fixations.latenciesFirstGazeShift(:,2,4), ...
            data.probabilisticModel.pred.manual.freeParameter(:,1), ...
            data.probabilisticModel.pred.manual.freeParameter(:,2)]);
        
    % % Proportion movements to chosen target
    % performance.choice.sampling.onChosen.first.manual.double = ...
    %     ;
    % performance.choice.sampling.onChosen.second.manual.double = ...
    %     ;
    % 
    % % Proportion movements on elements from the chosen set
    % % NOT SEPERATED BY SET SIZE
    % performance.choice.sampling.onChosen.allSets.visual.double = ...
    %     mean(data.data.fixations.propFixOnChosenModelEval(:,:,2), 2, "omitnan");
    % performance.choice.sampling.onChosen.allSets.manual.double = ...
    %     mean(data.data.fixations.propFixOnChosenModelEval(:,:,4), 2, "omitnan");
    % 
    % performance.choice.sampling.onChosen.allSets.visual.model = ...
    %     mean(data.probabilisticModel.pred.visual.propFixChosen, 2, "omitnan");
    % performance.choice.sampling.onChosen.allSets.manual.model = ...
    %     mean(data.probabilisticModel.pred.manual.propFixChosen, 2, "omitnan");
end

%% Visualise
subplotTitle = ["Visual", "Manual"];
axLabels = ...
    ["Accuracy easy", ...
     "Accuracy diff.", ...
     "Planning time easy", ...
     "Planning time diff.", ...
     "Inspection time easy", ...
     "Inspection time diff.", ...
     "Response time easy", ...
     "Response time diff.", ...
     "Sigmoid mean", ...
     "Sigmoid SD", ...
     "On chosen 1st", ...
     "On chosen 2nd", ...
     "On easy 1st", ...
     "On easy 2nd", ...
     "On smaller 1st", ...
     "On smaller 2nd", ...
     "On closest 1st", ...
     "On closest 2nd", ...
     "Latency 1st", ...
     "Latency 2nd", ...
     "Sampling noise", ...
     "Decision noise"];
idx = 1;
for f = 1:2 % Figure
    figure('Units', 'Normalized', ...
           'OuterPosition', [0, 0, 1, 0.40]);
    tiledlayout(2, 11);
    for s = 1:(size(dataOddEvenTrials, 2) / 2) % Subplot
        [r, p] = ...
            corrcoef(dataOddEvenTrials(:,idx,1), ...
                     dataOddEvenTrials(:,idx,2), ...
                     'Rows', 'complete');
        axLim = [min(min(dataOddEvenTrials(:,idx,:))), ...
                 max(max(dataOddEvenTrials(:,idx,:)))];

        hTile = nexttile;
        line(axLim, axLim, ...
             'LineStyle', '-', ...
             'Color', (zeros(1,3) + 0.75));
        hold on
        plot(dataOddEvenTrials(:,idx,1), dataOddEvenTrials(:,idx,2), ...
             'o', ...
             'MarkerEdgeColor', [0, 0, 0]);
        hold off
        axis([axLim, axLim], 'square');
        xticks(get(gca, 'YTick'));
        % lsline;
        xlabel(strcat(axLabels(s), ' [even]'));
        ylabel(strcat(axLabels(s), ' [odd]'));
        title(['r = ', num2str(round(r(1, 2), 2)), ...
               '; p = ', num2str(round(p(1, 2), 2))]);
        box off
        doesCutoff = checkAxLim([get(gca, 'XLim'), get(gca, 'YLim')], ...
                                [dataOddEvenTrials(:,idx,1), ...
                                 dataOddEvenTrials(:,idx,2)]);
        if doesCutoff
            error("Current axis limits result in values being cut-off!");
        end

        idx = idx + 1;
    end
    sgtitle(subplotTitle(f));
    saveas(gcf, strcat('split-half_', lower(subplotTitle(f)), '.png'))
    close all;
end
