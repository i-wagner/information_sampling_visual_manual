clear all; close all; clc

%% Init
initFig;
folder.fig = strcat(folder.root, "5_outreach/manuscript/figures/fig5");

%% Plot settings
idx.doubleVisual = 2;
idx.doubleManual = 4;
idx.decisionNoise = 2;
idx.samplingNoise = 1;

plotDat = cat(3, ...
              [data.performance.gainPerTime(:,idx.doubleVisual), ...
               idealObserver.performance(:,idx.doubleVisual)], ...
              [data.performance.gainPerTime(:,idx.doubleManual), ...
               idealObserver.performance(:,idx.doubleManual)], ...
              [probabilisticModel.pred.visual.freeParameter(:,idx.decisionNoise), ...
               probabilisticModel.pred.manual.freeParameter(:,idx.decisionNoise)], ...
              [probabilisticModel.pred.visual.freeParameter(:,idx.samplingNoise), ...
               probabilisticModel.pred.manual.freeParameter(:,idx.samplingNoise)], ...
              [data.performance.gainPerTime(:,idx.doubleVisual), ...
               probabilisticModel.pred.visual.performance], ...
              [data.performance.gainPerTime(:,idx.doubleManual), ...
               probabilisticModel.pred.manual.performance]);

xLabels = ["Oculomotor gain [cent/s]", "Manual gain [cent/s]", ...
           "Decision noise [oculomotor]", "Sampling noise [oculomotor]", ...
           "Oculomotor gain [cent/s]", "Manual gain [cent/s]"];
yLabels = ["Ideal obs. gain [cent/s]", "Ideal obs. gain [cent/s]", ...
           "Decision noise [manual]", "Sampling noise [manual]", ...
           "Model gain [cent/s]", "Model gain [cent/s]"];

maxGain = plotDat(:,:,[1:2, 5:6]);
maxGain = ceil(max(maxGain(:)));
axLimits = [[0, maxGain]; ...
            [0, maxGain]; ...
            [-0.05, 3]; ...
            [-0.05, 3]; ...
            [0, maxGain]; ...
            [0, maxGain]];
axTicks = [{axLimits(1,1):0.50:axLimits(1,2)}, ...
           {axLimits(2,1):0.50:axLimits(2,2)}, ...
           {0:1:axLimits(3,2)}, ...
           {0:1:axLimits(4,2)}, ...
           {axLimits(5,1):0.50:axLimits(5,2)}, ...
           {axLimits(6,1):0.50:axLimits(6,2)}];

%% Plot
nPanels = size(plotDat, 3);

hFig = figure;
tiledlayout(3, 2);
for p = 1:nPanels % Panel
    nexttile;
    line(axLimits(p,:), axLimits(p,:), ...
         'LineStyle', '-', ...
         'LineWidth', plt.line.widthThin, ...
         'Color', plt.color.black, ...
         'HandleVisibility', 'off');
    hold on
    plot(plotDat(:,1,p), plotDat(:,2,p), ...
         'o', ...
         'MarkerSize', plt.marker.sizeSmall, ...
         'MarkerFaceColor', plt.color.gray(2,:), ...
         'MarkerEdgeColor', plt.color.white, ...
         'LineWidth', plt.line.widthThin, ...
         'Color', plt.color.black)
    errorbar(mean(plotDat(:,1,p), 1, 'omitnan'), ...
             mean(plotDat(:,2,p), 1, 'omitnan'), ...
             ci_mean(plotDat(:,2,p)), ci_mean(plotDat(:,2,p)), ...
             ci_mean(plotDat(:,1,p)), ci_mean(plotDat(:,1,p)), ...
             'o', ...
             'MarkerSize', plt.marker.sizeLarge, ...
             'MarkerFaceColor', plt.color.black, ...
             'MarkerEdgeColor', 'none', ...
             'LineWidth', plt.line.widthThin, ...
             'CapSize', 0, ...
             'Color', plt.color.black, ...
             'HandleVisibility', 'off')
    [~, ~, h] = plotMean(plotDat(:,1,p), plotDat(:,2,p), plt.color.black);
    set(h(4), 'LineWidth', plt.line.widthThin);
    hold off
    axis([axLimits(p,:), axLimits(p,:)], 'square');
    xlabel(xLabels(p));
    ylabel(yLabels(p));
    xticks(axTicks{p});
    yticks(axTicks{p});
    box off

    if checkAxLim([axLimits(p,:), axLimits(p,:)], plotDat(:,:,p))
        error("Current axis limits result in values being cut-off!");
    end
end
sublabel([], -10, -85);
opt.size = [25, 55];
opt.imgname = folder.fig;
opt.save = true;
prepareFigure(hFig, opt);
close;